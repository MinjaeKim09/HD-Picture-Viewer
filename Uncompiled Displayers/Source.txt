[i]HDPICV
[i]"99999999999999999BBBBBBBBBBBBBB99B999999999999B99B99999999BBB9B99B99999999BBB9B99B99999999BBB9B99B999999999999B99B999B99999999B99B99BBB9999999B99B9BBBBB999B99B99B9BBBBBB9BBB9B99B9BBBBBBBBBB9B99B999999999999B99BBBBBBBBBBBBBB99BBBBBBBBBBBBBB99999999999999999"
[i]High Definition Picture Viewer                    By TLM

//dbd(0
//WARNING: the following code is so horrible, it crashed the ICE debugger and froze CEmu! :P
0->APOS
1->I
0->KEY
0->PAGE
0->TOTALPICS
10->THUMBNAILX
20->THUMBNAILY
18->RECTX
2->RECTY
1->SELECTEDPIC

" "->Str4
"HDPICV3L"->Str1
"HDPICV3R"->Str2
"HDPALV1B"->Str3

//this code resized the full image to thumbnail-size 
DefineSprite(100,150->THUMBNAIL


//Main loop
While KEY!=15
//detects images
	Call DETECTALLPICS
	//draws to buffer
	SetDraw(1
	//displays the thumbnails
	Call LOADTHUMB
	If TOTALPICS=0
		Goto STOP
	End
	//loads the selection GUI
	Call SELECTOR
End
Goto STOP

Lbl DETECTALLPICS
"HDPICV3L"->Str1
"HDPICV3R"->Str2
"HDPALV1B"->Str3

Lbl DETECTSOMEPICS

0->TOTALPICS
sum(0)
// Allocate memory for picture names
Alloc(9)->LPICNAME
Alloc(9)->RPICNAME
//palettes
Alloc(9)->LPICPAL
Alloc(9)->RPICPAL

Alloc(256)->PALNAME

0->LPOS

det(0
SetColor(255
SetTextFGColor(0
SetTextBGColor(255
PrintStringXY("Loading, Images Found:",10,10
PrintStringXY("By: TheLastMillennial 2019      Version: 4.0.2DEV",10,227


//bubble sort, heapsort, O(nlogn)				

While Detect(^^oLPOS,Str1->LPIC
	// Open the variable - we are sure it exists because it's detected
    Open(LPIC,"r")->LPICSLOT	
	// Write the name to the allocated memory
	Seek(8,0,LPICSLOT
	Alloc(9)->LPICNAME
	//FUTURE NOTE: you can read directly to a list (ex Read(L1,8,1,LPICSLOT) )
	Read(LPICNAME,8,1,LPICSLOT
		
	// Detect right half of the images
	0->RPOS
	While Detect(^^oRPOS,Str2->RPIC
        // Open the variable - we are sure it exists because it's detected
		Open(RPIC,"r"->RPICSLOT

		// Write the name
		Seek(8,0,RPICSLOT
		Read(RPICNAME,8,1,RPICSLOT

		// Compare names compare returns 0 if true
		If not(Compare(LPICNAME,RPICNAME
			// Yay, they matched!
			//store right palette to mem
			//get palette name
			//Seek(8,0,RPICSLOT
			//Read(RPICPAL,7,1,RPICSLOT
			//search for it
			0->PALPOS
			While Detect(^^oPALPOS,Str3->PAL
				Open(PAL,"r")->PALSLOT
				Seek(8,0,PALSLOT
				Read(PALNAME,8,1,PALSLOT
				If not(Compare(LPICNAME,PALNAME
					//Now store the data pointer into L1
					TOTALPICS+3->TOTALPICS
					
            		GetDataPtr(LPICSLOT)->L1(TOTALPICS
					GetDataPtr(RPICSLOT)->L2(TOTALPICS
					GetDataPtr(PALSLOT)->L3(TOTALPICS

					FillRectangle_NoClip(170,10,20,15
					SetTextXY(170,10
					PrintInt(TOTALPICS/3,2
					//Pause 
					//"Test
				
					//gets name of the pictures
					LPICNAME->L4(TOTALPICS
					//gets size of the pictures
					//GetSize(LPICSLOT)+GetSize(RPICSLOT)->L5(TOTALPICS		
				End
				//Closes the palette
				Close(PALSLOT
			End
		End
		// Close the right half of the image
		Close(RPICSLOT
	End
	// Close the left half of the image
	Close(LPICSLOT
End
//end of Detect( LPIC

Return
//go back to the main loop


//displays thumbnails
Lbl LOADTHUMB
det(0
//set up for text
//normal text size
SetTextScale(1,1
//background text black
SetTextBGColor(0
//text white
SetTextFGColor(1

//if no pictures are detected
If TOTALPICS=0
	det(9,0
	det(3
	//background text black
	SetTextBGColor(255
	//text white
	SetTextFGColor(192
	det(18,"No Pictures Detected!",80,1
	SetTextFGColor(0
	det(18,"Convert some images and send them to your",5,11
	det(18,"calculator using the HDp\ic converter!",5,21
	det(18,"Tutorial:  https://youtu.be/s1-g8oSueQg",5,31
	det(18,"Press any key to quit",80,41
	While not(getKey
	End
End
ReturnIf TOTALPICS=0
//divides total pics by 3 to get the correct number of half-pictures detected
//TOTALPICS/3->SIMPLETOTAL
//initializes the I for the loop, it's the starting point
1->I
//Loops until the screen has been filled with a max of 6 pictures (6>=I) or if there are no more pictures to display ((I*3)=<TOTALPICS)

//6>=I and (I*3+18*PAGE)<=TOTALPICS

//sets color to black
SetColor(0
//makes a grey bar at the left of the screen, options will be shown there
FillRectangle_NoClip(0,0,120,240

Call DISPNAMES

Return

Lbl DISPNAMES
//clears current names
SetColor(0
SetDraw(not(det(8
FillRectangle_NoClip(0,0,120,240
SetDraw(not(det(8
FillRectangle_NoClip(0,0,120,240
SetTextFGColor(1
SetTextBGColor(0
//displays the images text name (the var 'I' was initialized above) the Y is for text positioning
0->Y
If I<1
	1->I
End
	
While (15+I-Y)>=I and I*3<=TOTALPICS
	{L4+I*3}->HEADERTEXT
	//gets proper text position
	20->TEXTX
	4+15*Y->TEXTY
	//prints out the image name, to make sure double buffering works, I have to display it on both buffers :(
	SetDraw(not(det(8
	PrintStringXY(HEADERTEXT,TEXTX,TEXTY
	SetDraw(not(det(8
	PrintStringXY(HEADERTEXT,TEXTX,TEXTY
	
	I+1->I
	Y+1->Y
End
Return

Lbl DISPTHUMB
L1(SELECTEDPIC*3)->LPIC
L2(SELECTEDPIC*3)->RPIC
L3(SELECTEDPIC*3)->PAL
Call SETPALETTE
SetColor(0
Rectangle_NoClip(120,0,200,120
det(4,PAL,512,0
ScaleSprite(LPIC,THUMBNAIL
Sprite_NoClip(THUMBNAIL,120,45)
ScaleSprite(RPIC,THUMBNAIL
Sprite_NoClip(THUMBNAIL,120+*{THUMBNAIL},45)
Return

//sets palette to current selected pic palette
Lbl SETPALETTE
L3(SELECTEDPIC*3)->PAL
det(4,PAL,512,0
Return

//selection GUI
Lbl SELECTOR

dbd(0
//presets palette to 
//SetDraw(1
//sets color to white
SetColor(1
//displays the rectangle selector
Rectangle_NoClip(RECTX,RECTY,70,12)
Call DISPTHUMB
//----------NEW----------------
SwapDraw
While KEY!=15
	getKey->KEY
	If KEY!=0

		//detecs if the up or down arrow keys are pressed and updates the y postition of cursor accordingly
		If ((SELECTEDPIC*3)<TOTALPICS or ((SELECTEDPIC*3)=TOTALPICS and KEY=4)) and ((SELECTEDPIC>1) or (SELECTEDPIC=1 and KEY=1))
			dbd(0
			(KEY=1)-(KEY=4)->YPOS

			//updates the picture selected
			YPOS+SELECTEDPIC->SELECTEDPIC
			
			//sets color to black
			SetColor(0
			//clears the rectangular selector
			SetDraw(0
			Rectangle_NoClip(RECTX,RECTY,70,12)
			SetDraw(1
			If (SELECTEDPIC=2 or (SELECTEDPIC=(TOTALPICS/3)-1)
					//sets color to black
					SetColor(0
					//clears the rectangular selector on top and bottom
					Rectangle_NoClip(18,2,70,12)
					Rectangle_NoClip(18,227,70,12)
					SetDraw(not(det(8
					Rectangle_NoClip(18,2,70,12)
					Rectangle_NoClip(18,227,70,12)
					SetDraw(not(det(8
			End
			
			//updates the rectangle coordinates 
			YPOS*15+RECTY->RECTY
			If RECTY>=227
				227->RECTY
				SELECTEDPIC-15->I
				Call DISPNAMES
			End
			//checks if the box is at the top of the screen or is trying to move above top
			If RECTY<=2 or I>500
				2->RECTY
				SELECTEDPIC-1->I
				If I>500
					1->I
				End
				Call DISPNAMES
			End
			
			Call DISPTHUMB
			//sets color to white
			SetColor(1
			//displays rectangular selector
			Rectangle_NoClip(RECTX,RECTY,70,12)
		End
		SwapDraw
		//
		If (KEY=9 or KEY=54)
			//stores the selection into a restorer variable
			SELECTEDPIC->ORIGSELECTED
			//stores the picture selected the +6*PAGE accounts for multiple pages
			L1(SELECTEDPIC*3)->LPIC
			L2(SELECTEDPIC*3)->RPIC
			L3(SELECTEDPIC*3)->PAL
			det(5,0
			Sprite_NoClip(LPIC,0,0)
			Sprite_NoClip(RPIC,*{LPIC},0)
			det(4,PAL,512,0
			SwapDraw
			
			While KEY!=15
			//Gets the correct picture that was selected into L and RPIC
				getKey->KEY
					
				If (KEY=53 or KEY=2 or KEY=4) and SELECTEDPIC>1
					SELECTEDPIC-1->SELECTEDPIC
				End
				If (KEY=49 or KEY=3 or KEY=1) and SELECTEDPIC*3<TOTALPICS
					SELECTEDPIC+1->SELECTEDPIC
				End
				//displays the picture
				If KEY
					L1(SELECTEDPIC*3)->LPIC
					L2(SELECTEDPIC*3)->RPIC
					L3(SELECTEDPIC*3)->PAL
					det(5,0
					
					Sprite_NoClip(LPIC,0,0)
					Sprite_NoClip(RPIC,*{LPIC},0)
					det(4,PAL,512,0
					SwapDraw
					
				End
			End
			//restores selected pic so the selector will open the correct pic
			ORIGSELECTED->SELECTEDPIC
			Call LOADTHUMB
			Call DISPTHUMB
			
			//det(3
			//makes sure the program wont quit
			0->KEY
			
		End
		Call DISPTHUMB
	End
End

Return
//go back to main loop

//ends the program
Lbl STOP
CloseAll
det(1